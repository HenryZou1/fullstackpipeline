pipeline {
    agent any
    
    parameters{
        booleanParam(name: 'CHECKOUT', defaultValue: false, description: 'checkout git')    
        booleanParam(name: 'BUILDUSERAPI', defaultValue: false, description: 'build userAPI')
        booleanParam(name: 'BUILDEVENTAPI', defaultValue: false, description: 'build eventAPI')
        booleanParam(name: 'BUILDFRONTEND', defaultValue: false, description: 'build FRONTEND')
        booleanParam(name: 'DEPLOYMICROSERVICE', defaultValue: false, description: 'DEPLOY MICROSERVICE')
        booleanParam(name: 'DEPLOYFRONTEND', defaultValue: false, description: 'DEPLOY FRONTEND')
    }
    
    environment{
        GIT_CREDENTIAL_ID = 'git_user_pwd'
        GIT_REPO = 'https://github.com/HenryZou1/fullstackpipeline'
        GIT_BRANCH ='DEV'
        NGINX_HTML = '"C:\\Program Files (x86)\\nginx-1.29.0\\nginx-1.29.0\\html"'
        API_DIR = '"C:\\Program Files (x86)\\nginx-1.29.0\\nginx-1.29.0\\html\\api"'
        API_NAME_USER = 'userAPI'
        API_NAME_EVENT = "eventAPI"
    }
    stages {
        stage('Check out source code') {
             when{
                    expression{return params.CHECKOUT}
                }
            steps {
                echo "checkout started from ${GIT_REPO}"
                git credentialsId: "${GIT_CREDENTIAL_ID}", url: "${GIT_REPO}", branch:"${GIT_BRANCH}"
                echo "checkout done"
            }
        }
        stage('build userAPI'){
            when{
                    expression{return params.BUILDUSERAPI}
                }
            steps{
                echo "building user API"
                dir('userAPI'){
                    bat 'gradlew clean build'
                }
            }
        }
        
        stage('build eventAPI'){
            when{
                    expression{return params.BUILDEVENTAPI}
                }
            steps{
                echo "building event API"
                dir('eventAPI'){
                    bat 'gradlew clean build'
                }
                
            }
        }
        
        stage('build front-end app'){
            when{
                    expression{return params.BUILDFRONTEND}
                }
            steps{
                echo "building front-end API"
                withEnv(['CI=False']){
                    dir('client_na_aia'){
                        bat 'npm install'
                        bat 'npm run build'
                    }
                }
                
            }
        }
        stage('deploy microservice'){
            when{
                    expression{return params.DEPLOYMICROSERVICE}
                }
                
            steps{
                script{
                    def fullPath = "${API_DIR}\\${API_NAME_USER}"
                    def checkCommand = "if not exist ${fullPath} mkdir ${fullPath}"
                    bat checkCommand
                    def jarPath = "userAPI\\build\\libs\\userAPI-1.0.jar"
                    def targetJar = "${fullPath}\\userAPI.jar"
                    bat "copy ${jarPath} ${targetJar}"
                    bat "set JENKINS_NODE_COOKIE=dontKillMe && start java -jar ${targetJar} --server.port=9090"
                    bat "echo %JENKINS_NODE_COOKIE%" 
                    def fullPath1 = "${API_DIR}\\${API_NAME_EVENT}"
                    def checkCommand1 = "if not exist ${fullPath1} mkdir ${fullPath1} "
                    bat checkCommand1
                    def jarPath1 = "eventAPI\\build\\libs\\eventAPI-1.0.jar"
                    def targetJar1 = "${fullPath1}\\eventAPI.jar"
                    bat "copy ${jarPath1} ${targetJar1}"
                    bat "start java -jar ${targetJar1} --server.port=9091"
                }
            }
        }
        stage('Deploy front-end app'){

            when{
                    expression{return params.DEPLOYFRONTEND}
                }
            
            steps{
                
                script{
                    println "GIT_REPO: ${env.GIT_REPO}"
                    def buildPath = 'client_na_aia\\build\\*'
                    def targetPath = "${env.NGINX_HTML}"
                    bat "xcopy /E /Y /I ${buildPath} ${targetPath}"
                }
            }
        }
    }
    
    post{
        success {
            slackSend (
                message: "✅ SUCCESS: Job '${env.JOB_NAME} [#${env.BUILD_NUMBER}]' completed successfully. ${env.BUILD_URL}"
            )
        }

        failure {
            slackSend (
                message: "❌ FAILURE: Job '${env.JOB_NAME} [#${env.BUILD_NUMBER}]' failed. ${env.BUILD_URL}"
            )
        }

        always {
            echo "Build completed. Slack notified."
        }
    }
}
